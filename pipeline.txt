pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/akilhassane/netflix_clone_deployed_on_cLoud.git'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=netflix \
                    -Dsonar.projectKey=netflix '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){
                       // Debug: Check current directory and Dockerfile existence
                       sh "pwd && ls -la && ls -la Dockerfile"
                       // More debugging: check file content and Docker context
                       sh "file Dockerfile && head -5 Dockerfile"
                       sh "sudo docker version && sudo docker buildx version"
                       // Try buildah as alternative to Snap Docker
                       sh "whoami && which docker && which buildah"
                       // Install buildah if not available
                       sh "sudo apt update && sudo apt install -y buildah || echo 'buildah already installed'"
                       // Build using buildah (more Jenkins-friendly than Snap Docker)
                       sh """
                           buildah --version
                           newcontainer=\$(buildah from node:16.17.0-alpine)
                           buildah run \$newcontainer -- /bin/sh -c 'mkdir -p /app'
                           buildah config --workingdir /app \$newcontainer
                           buildah copy \$newcontainer package.json ./
                           buildah copy \$newcontainer yarn.lock ./
                           buildah run \$newcontainer -- yarn install
                           buildah copy \$newcontainer . .
                           buildah config --env VITE_APP_TMDB_V3_API_KEY=99eec89d2dc36d0cfdacb8033e3e710c \$newcontainer
                           buildah config --env VITE_APP_API_ENDPOINT_URL=https://api.themoviedb.org/3 \$newcontainer
                           buildah run \$newcontainer -- yarn build
                           
                           # Production stage
                           prodcontainer=\$(buildah from nginx:stable-alpine)
                           buildah config --workingdir /usr/share/nginx/html \$prodcontainer
                           buildah run \$prodcontainer -- rm -rf ./*
                           buildah copy \$prodcontainer \$newcontainer:/app/dist .
                           buildah config --port 80 \$prodcontainer
                           buildah config --entrypoint '["nginx", "-g", "daemon off;"]' \$prodcontainer
                           buildah commit \$prodcontainer netflix
                           buildah rm \$newcontainer \$prodcontainer
                       """
                       sh "sudo docker tag netflix akilhassane/netflix:latest "
                       sh "sudo docker push akilhassane/netflix:latest "
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image akilhassane/netflix:latest > trivyimage.txt" 
            }
        }
        stage('Deploy to container'){
            steps{
                sh 'docker run -d -p 8081:80 akilhassane/netflix:latest'
            }
        }
        stage('Deploy to kubernets'){
            steps{
                script{
                    dir('Kubernetes') {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                                sh 'kubectl apply -f deployment.yml'
                                sh 'kubectl apply -f service.yml'
                        }   
                    }
                }
            }
        }

    }
    post {
     always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'iambatmanthegoat@gmail.com',                                #change mail here
            attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}

// If you get docker login failed error:
//
// sudo su
// sudo usermod -aG docker jenkins
// sudo systemctl restart jenkins